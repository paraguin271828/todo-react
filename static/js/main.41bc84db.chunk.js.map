{"version":3,"sources":["components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","value","id","dateProperty","descriptionProperty","doneProperty","useState","todoValue","todoDescription","todoDetails","setDetails","editMode","setEdit","editIcon","setEditIcon","doneState","setDone","toggleEdit","el","document","getElementById","disabled","editTodo","console","log","trim","className","type","onClick","htmlFor","onChange","target","TodoList","date","Date","toLocaleDateString","description","isDone","arrayOfData","setData","newTitle","setTitle","newDescription","setDescription","getToDoList","map","element","index","key","classList","add","onSubmit","event","preventDefault","remove","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41bc84db.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../styles/Todo.css\";\nimport \"../Fork-Awesome-1.1.7/css/fork-awesome.min.css\";\nimport TodoList from \"./TodoList\";\n\nexport default function Todo({\n  value,\n  id,\n  dateProperty,\n  descriptionProperty,\n  doneProperty\n}) {\n  const [todoDetails, setDetails] = useState({\n    todoValue: value,\n    todoDescription: descriptionProperty\n  });\n\n  const [editMode, setEdit] = useState(false);\n  const [editIcon, setEditIcon] = useState(\"fa fa-pencil fa-fw\");\n\n  const [doneState, setDone] = useState(doneProperty);\n\n  function toggleEdit(el, id) {\n    setEdit(editMode ? false : true);\n    setEditIcon(editMode ? \"fa fa-pencil fa-fw\" : \"fa fa-check fa-fw\");\n\n    const valueProp = document.getElementById(id);\n    valueProp.disabled = editMode;\n  }\n  function editTodo(value) {\n    console.log(\"Clicked on edit\");\n    setDetails({ todoValue: value.trim() });\n  }\n  function markDone() {\n    doneState ? setDone(false) : setDone(true);\n    // alert(\"Clicked on Mark Done: \" + value + \" \" + doneState);\n  }\n\n  function deleteTodo() {\n    // arrayOfData.splice(index, 1);\n  }\n  return (\n    <div id={\"todo\" + id} className=\"todo-wrapper\">\n      <div className=\"todo-title-date\">\n        <input type=\"checkbox\" id={\"check\" + id} onClick={markDone} />\n        <label htmlFor={\"check\" + id} />\n        <h5>\n          <input\n            type=\"text\"\n            value={todoDetails.todoValue}\n            id={\"title\" + id}\n            className={doneState ? \"done\" : \"\"}\n            onChange={el => editTodo(el.target.value)}\n            disabled\n          />\n          <i\n            className={editIcon}\n            onClick={el => toggleEdit(el.target, \"title\" + id)}\n          />\n        </h5>\n        <span>Created on: {dateProperty}</span>\n      </div>\n      <div className=\"description-wrapper\">\n        <div className=\"todo-description\">\n          <input\n            type=\"text\"\n            value={todoDetails.todoDescription}\n            id={\"description\" + id}\n            className={doneState ? \"done\" : \"\"}\n            onChange={el => editTodo(el.target.value)}\n            disabled\n          />\n          <i\n            className={editIcon}\n            onClick={el => toggleEdit(el.target, \"description\" + id)}\n          />\n        </div>\n        <div className=\"function-buttons\">\n          <button\n            onClick={deleteTodo}\n            type=\"button\"\n            className=\"btn btn-secondary button-todo btn btn-danger\"\n          >\n            <i className=\"fa fa-trash-o fa-lg\" /> Delete\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Todo from \"./Todo\";\nimport \"../styles/Todolist.css\";\nimport \"../styles/Todo.css\";\n\nexport default function TodoList() {\n  const [arrayOfData, setData] = useState([\n    {\n      value: \"Finish group work assignment\",\n      date: new Date().toLocaleDateString(),\n      description: \"Work on UI and do data manipulation\",\n      isDone: false\n    },\n    {\n      value: \"Buy toilet paper\",\n      date: new Date().toLocaleDateString(),\n      description: \"Try at least 3 stores...Germans love to eat toilet paper!\",\n      isDone: false\n    },\n    {\n      value: \"Take the dog to the vet\",\n      date: new Date().toLocaleDateString(),\n      description: \"\",\n      isDone: false\n    }\n  ]);\n\n  const [newTitle, setTitle] = useState('');\n  const [newDescription, setDescription] = useState('');\n\n  function handleNewTitle (event) {\n    setTitle(event.target.value);\n  }\n  function handleNewDescription (event) {\n    setDescription(event.target.value);\n  }\n\n  function openTodoModal() {\n    document.getElementById('addTodo').classList.add('enabled');\n  }\n\n  function cancelTodo(event) {\n    event.preventDefault();\n    document.getElementById('addTodo').classList.remove('enabled');\n  }\n\n  function addTodo (event) {\n    event.preventDefault();\n    console.log('Add new Todo');\n    setData([...arrayOfData,\n      {\n        value: newTitle,\n        date: new Date().toLocaleDateString(),\n        description: newDescription,\n        isDone: false\n      }]);\n      console.log(arrayOfData);\n    document.getElementById('addTodo').classList.remove('enabled');\n  }\n\n  const getToDoList = arrayOfData.map((element, index) => {\n    // Map returns an array at then\n    return (\n      <Todo\n        key={index}\n        value={element.value}\n        id={index}\n        dateProperty={element.date}\n        descriptionProperty={element.description}\n        doneProperty={element.isDone}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <div className=\"header-menu-wrapper\">\n        <div className=\"header-menu\">\n          <h1>To Do List</h1>\n          <button\n            onClick={openTodoModal}\n            type=\"button\"\n            className=\"btn btn-secondary button-todo\"\n          ><i className=\"fa fa-plus\"></i>\n            Add new To Do\n          </button>\n        </div>\n      </div>\n      <div id=\"todoList\">{getToDoList}</div>\n      <div id=\"addTodo\">\n        <form onSubmit={addTodo}>\n          <button id=\"cancelButton\" onClick={cancelTodo}><i className=\"fa fa-remove fa-2x\"></i></button>\n          <input type=\"text\" placeholder=\"Todo Title\" value={newTitle} onChange={handleNewTitle} />\n          <textarea placeholder=\"Todo Desciption\" value={newDescription} onChange={handleNewDescription} />\n          <button className=\"btn btn-lg btn-success\" type=\"submit\">Add Todo</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./styles/styles.css\";\nimport \"./App.css\";\nimport TodoList from \"./components/TodoList\";\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}