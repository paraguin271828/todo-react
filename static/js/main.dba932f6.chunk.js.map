{"version":3,"sources":["components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","value","id","dateProperty","descriptionProperty","doneProperty","deleteTodo","useState","todoValue","todoDescription","todoDetails","setDetails","title","descr","editMode","setEdit","editIcon","setEditIcon","doneState","setDone","toggleEdit","e","elT","preventDefault","editModeState","editIconState","console","log","document","getElementById","disabled","editTodo","element","trim","className","type","onClick","htmlFor","onSubmit","el","defaultValue","onChange","target","required","TodoList","date","Date","toLocaleDateString","description","isDone","arrayOfData","setData","newTitle","setTitle","newDescription","setDescription","item","filteredArray","Array","from","filter","_","i","useEffect","getToDoList","map","index","key","classList","add","event","remove","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dba932f6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../styles/Todo.css\";\nimport \"../Fork-Awesome-1.1.7/css/fork-awesome.min.css\";\nimport TodoList from \"./TodoList\";\n\nexport default function Todo({\n  value,\n  id,\n  dateProperty,\n  descriptionProperty,\n  doneProperty,\n  deleteTodo\n}) {\n  const [todoDetails, setDetails] = useState({\n    todoValue: value,\n    todoDescription: descriptionProperty\n  });\n\n  const [editMode, setEdit] = useState(\n    {\n      title: false,\n      descr: false\n    }\n  );\n  const [editIcon, setEditIcon] = useState(\n    {\n      title: \"fa fa-pencil fa-fw\",\n      descr: \"fa fa-pencil fa-fw\"\n    }\n  );\n\n  const [doneState, setDone] = useState(doneProperty);\n\n  function toggleEdit(e, id, elT) {\n    e.preventDefault();\n\n    let editModeState = {...editMode};\n    let editIconState = {...editIcon};\n\n    editModeState[elT] = !editMode[elT];\n    editIconState[elT] = editMode[elT] ? \"fa fa-pencil fa-fw\" : \"fa fa-check fa-fw\";\n\n    setEdit(editModeState);\n    setEditIcon(editIconState)\n\n    console.log(editMode);\n    console.log(editIcon);\n\n    const valueProp = document.getElementById(id);\n    valueProp.disabled = editMode[elT];\n  }\n  function editTodo(value, element) {\n    console.log(\"Clicked on edit\");\n    if (value.trim() === '') console.log(\"Empty title not allowed\");\n    setDetails({ element: value.trim() });\n    console.log(todoDetails);\n  }\n  function markDone() {\n    doneState ? setDone(false) : setDone(true);\n    // alert(\"Clicked on Mark Done: \" + value + \" \" + doneState);\n  }\n\n  return (\n    <div id={\"todo\" + id} className=\"todo-wrapper\">\n      <div className=\"todo-title-date\">\n        <input type=\"checkbox\" id={\"check\" + id} onClick={markDone} />\n        <label htmlFor={\"check\" + id} />\n        <h5>\n        <form onSubmit={el => toggleEdit(el, \"title\" +\n         id, 'title')}>\n          <input\n            type=\"text\"\n            defaultValue={todoDetails.todoValue}\n            id={\"title\" + id}\n            className={doneState ? \"done\" : \"\"}\n            onChange={el => editTodo(el.target.value, 'todoValue')}\n            disabled required\n          />\n          <button type=\"submit\">\n          <i className={editIcon.title} />\n          </button>\n        </form>\n        </h5>\n        <span>Created on: {dateProperty}</span>\n      </div>\n      <div className=\"description-wrapper\">\n        <div className=\"todo-description\">\n          <form onSubmit={el => toggleEdit(el, \"description\" + id, 'descr')}>\n          <input\n            type=\"text\"\n            defaultValue={todoDetails.todoDescription}\n            id={\"description\" + id}\n            className={doneState ? \"done\" : \"\"}\n            onChange={el => editTodo(el.target.value, 'todoDescription')}\n            disabled\n          />\n          <button type=\"submit\">\n            <i className={editIcon.descr} />\n           </button>\n          </form>\n        </div>\n        <div className=\"function-buttons\">\n          <button\n            onClick={() => {deleteTodo(id)}}\n            type=\"button\"\n            className=\"btn btn-secondary button-todo btn btn-danger\"\n          >\n            <i className=\"fa fa-trash-o fa-lg\" /> Delete\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Todo from \"./Todo\";\nimport \"../styles/Todolist.css\";\nimport \"../styles/Todo.css\";\n\nexport default function TodoList() {\n  const [arrayOfData, setData] = useState([\n    {\n      value: \"Finish group work assignment\",\n      date: new Date().toLocaleDateString(),\n      description: \"Work on UI and do data manipulation\",\n      isDone: false\n    },\n    {\n      value: \"Buy toilet paper\",\n      date: new Date().toLocaleDateString(),\n      description: \"Try at least 3 stores...Germans love to eat toilet paper!\",\n      isDone: false\n    },\n    {\n      value: \"Take the dog to the vet\",\n      date: new Date().toLocaleDateString(),\n      description: \"\",\n      isDone: false\n    }\n  ]);\n\n  const [newTitle, setTitle] = useState('');\n  const [newDescription, setDescription] = useState('');\n\n  function handleNewTitle (event) {\n    setTitle(event.target.value);\n  }\n  function handleNewDescription (event) {\n    setDescription(event.target.value);\n  }\n\n  function openTodoModal() {\n    document.getElementById('addTodo').classList.add('enabled');\n  }\n\n  function cancelTodo(event) {\n    event.preventDefault();\n    document.getElementById('addTodo').classList.remove('enabled');\n  }\n\n  function addTodo (event) {\n    event.preventDefault();\n    console.log('Add new Todo');\n    setData([...arrayOfData,\n      {\n        value: newTitle,\n        date: new Date().toLocaleDateString(),\n        description: newDescription,\n        isDone: false\n      }]);\n      console.log(arrayOfData);\n    document.getElementById('addTodo').classList.remove('enabled');\n  }\n\n  function deleteTodo (item) {\n      console.log(`ID of item to delete: ${item}`);\n      const newArray = Array.from(arrayOfData);\n      const filteredArray = newArray.filter((_, i) => i !== item);\n      setData(filteredArray);\n      console.log(filteredArray);\n      console.log(`filtered array: ${filteredArray}`);\n  }\n\n  useEffect(() => {}, [arrayOfData]);\n\n  const getToDoList = arrayOfData.map((element, index) => {\n    // Map returns an array at then\n    return (\n      <Todo\n        key={index}\n        value={element.value}\n        id={index}\n        dateProperty={element.date}\n        descriptionProperty={element.description}\n        doneProperty={element.isDone}\n        deleteTodo={deleteTodo}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <div className=\"header-menu-wrapper\">\n        <div className=\"header-menu\">\n          <h1>To Do List</h1>\n          <button\n            onClick={openTodoModal}\n            type=\"button\"\n            className=\"btn btn-secondary button-todo\"\n          ><i className=\"fa fa-plus\"></i>\n            Add new To Do\n          </button>\n        </div>\n      </div>\n      <div id=\"todoList\">{getToDoList}</div>\n      <div id=\"addTodo\">\n        <form onSubmit={addTodo}>\n          <button id=\"cancelButton\" onClick={cancelTodo}><i className=\"fa fa-remove fa-2x\"></i></button>\n          <input type=\"text\" required placeholder=\"Todo Title\" value={newTitle} onChange={handleNewTitle} />\n          <textarea placeholder=\"Todo Desciption\" value={newDescription} onChange={handleNewDescription} />\n          <button className=\"btn btn-lg btn-success\" type=\"submit\">Add Todo</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./styles/styles.css\";\nimport \"./App.css\";\nimport TodoList from \"./components/TodoList\";\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}